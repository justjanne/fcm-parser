fcm_file {
    file_header: {
        format_identifier: uint8[4]
        file_version: uint8[4]
        content_id: uint32
        // After header_length all further values are optional.
        // To figure out if there's more to read track the number of bytes read since header_length
        header_length: uint32
        // null-terminated ascii
        short_name?: uint8[8]
        // utf-16
        long_name?: {
            codepoint_count: uint8
            codepoints: uint16[]
        }
        // utf-16
        author_name?: {
            codepoint_count: uint8
            codepoints: uint16[]
        }
        // utf-16
        copyright?: {
            codepoint_count: uint8
            codepoints: uint16[]
        }
        thumbnail_block_size_width?: uint8
        thumbnail_block_size_height?: uint8
        // Windows Bitmap Image (.bmp)
        thumbnail?: {
            length: uint32
            data: uint8[]
        }
        storage_machine_model_id?: uint
        save_machine_ver?: uint32
        print_to_cut?: bool32
    }
    cut_data_header: {
        // see file_type enum
        file_type: uint32
        mat_id: uint32
        cut_width: uint32
        cut_height: uint32
        seam_allowance_width: uint32
        // align_flag and align_marks only exist if file_type is PRINTTOCUT
        align_needed?: bool32
        align_marks?: {
            // no matter how many are defined, data is -- if present -- always 32 bytes long
            count: uint32
            data: []{
                x: uint32
                y: uint32
            }
        }
    }
    piece_table_header: {
        piece_offsets: {
            count: uint32
            data: uint32[]
        }
        piece_table_length: uint32
        piece_ids: {
            count: uint32
            data: uint16[]
        }
        pieces: []{
            padding: uint64
            width: uint32
            height: uint32
            has_transform: bool32
            // only exist if has_transform is true
            transformA11?: float32
            transformA21?: float32
            transformA22?: float32
            transformA13?: float32
            transformA12?: float32
            transformA23?: float32
            expansion_limit_value: uint32
            reduction_limit_value: uint32
            // see piece_restrictions_flags enum
            restriction_flags: uint32
            label: {
                length: uint32
                // If the label has any content, the first byte is set to 0x01
                data: u8[]
            }
            paths: {
                count: uint32
                data: []{
                    // see path_flags enum
                    flags: {
                        length: uint32
                        data: u8[]
                    }
                    outline_count: uint32
                    rhinestone_count: uint32
                    rhinestone_diameter: uint32
                    // line_segment only exists if outline_count > 0
                    line_segment?: {
                        start: {
                            x: int32
                            y: int32
                        }
                        outlines: []{
                            // see outline_type enum
                            outline_type: uint32
                            segment: {
                                count: uint32
                                data: []{
                                    // control points only exist if outline_type is BEZIER
                                    control1?: {
                                        x: int32,
                                        y: int32
                                    }
                                    control2?: {
                                        x: int32,
                                        y: int32
                                    }
                                    end?: {
                                        x: int32,
                                        y: int32
                                    }
                                }
                            }
                        }
                    }
                    rhinestones: []{
                        x: int32
                        y: int32
                    }
                }
            }
        }
    }
}

file_type {
    CUT = 0x10
    PRINTTOCUT = 0x38
}

piece_restriction_flags {
    LICENSE_DESIGN = 0x0001
    SEAM_ALLOWANCE = 0x0002
    PROHIBITION_OF_SEAM_ALLOWANCE_SETTING = 0x0004
    NO_ASPECT_RATIO_CHANGE_PROHIBITED = 0x0020
    JUDGE_BY_USING_PERFECT_MASK_AT_AUTO_LAYOUT = 0x0020
    TEST_PATTERN = 0x0040
    PROHIBITION_OF_EDIT = 0x0080
    PROHIBITION_OF_TOOL = 0x0100
}

path_flags {
    PATH_OPEN = 0x0001
    TOOL_CUT = 0x0002
    TOOL_DRAW = 0x0004
    SEAM_ALLOWANCE = 0x0008
    TOOL_RHINESTONE = 0x0010
    FILL = 0x0020
    AUTO_ALIGN = 0x0040
    TOOL_DRAW_ONLY = 0x1000
    TOOL_EMBOSS = 0x2000
    TOOL_FOIL = 0x4000
    TOOL_PERFORATING = 0x8000
}

outline_type {
    LINE = 0x00
    BEZIER = 0x01
}
